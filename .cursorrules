# Web Tailored Fitness - Cursor Rules

## Project Overview
This is a fitness application built with:
- **Frontend**: Vite + React 18 + TypeScript
- **Styling**: Tailwind CSS + shadcn/ui components
- **Build Tool**: Vite
- **Package Manager**: npm

## üîß Technology Stack
- **React 18** with TypeScript for type safety
- **Vite** for fast development and building
- **Tailwind CSS** for utility-first styling
- **shadcn/ui** for beautiful, accessible UI components
- **ESLint** for code linting

## üìã Documentation Requirements

### CRITICAL: All implementations must be documented
When implementing ANY feature, you MUST:

1. **Update this .cursorrules file** with:
   - Feature description
   - File locations where the feature is implemented
   - Dependencies added
   - API endpoints created (if any)
   - Components created/modified

2. **Add inline documentation** in code:
   - JSDoc comments for all functions/components
   - Clear variable and function names
   - Type annotations for all TypeScript interfaces/types

3. **Maintain the Feature Registry** below with:
   - Feature name
   - Implementation files
   - Status (In Progress/Complete)
   - Dependencies

## üìÅ Project Structure
```
src/
‚îú‚îÄ‚îÄ components/          # React components
‚îÇ   ‚îî‚îÄ‚îÄ ui/             # shadcn/ui components
‚îú‚îÄ‚îÄ lib/                # Utility functions
‚îÇ   ‚îî‚îÄ‚îÄ utils.ts        # cn() utility for className merging
‚îú‚îÄ‚îÄ App.tsx             # Main application component
‚îú‚îÄ‚îÄ main.tsx            # Application entry point
‚îî‚îÄ‚îÄ index.css           # Global styles with Tailwind + shadcn/ui theme
```

## üé® Styling Guidelines
- Use Tailwind CSS utility classes
- Use shadcn/ui components when possible
- Follow the design system defined in `src/index.css`
- Use CSS variables for theming (light/dark mode support)

## üß© Component Guidelines
- All components should be TypeScript
- Use functional components with hooks
- Export components as default when single export
- Use named exports for multiple utilities
- Follow shadcn/ui patterns for custom components

## üì¶ Adding New Dependencies
When adding dependencies:
1. Document the reason in this file
2. Update the Technology Stack section
3. Note any configuration changes needed

## üöÄ Development Commands
```bash
npm run dev          # Start development server
npm run build        # Build for production
npm run preview      # Preview production build
npm run lint         # Run ESLint
```

---

# üìä FEATURE REGISTRY
*Keep this updated with every feature implementation*

## ‚úÖ Completed Features

### 1. Project Setup & Configuration
- **Files**: `package.json`, `vite.config.ts`, `tsconfig.app.json`, `tailwind.config.js`
- **Description**: Initial Vite React TypeScript project with shadcn/ui integration
- **Components**: Basic App component with shadcn/ui Button
- **Dependencies**: 
  - React 18 + TypeScript
  - Vite 7.x
  - Tailwind CSS + PostCSS + Autoprefixer
  - shadcn/ui components (button)
  - tailwindcss-animate, class-variance-authority, clsx, tailwind-merge

### 2. Styling System
- **Files**: `src/index.css`, `tailwind.config.js`, `components.json`
- **Description**: Complete Tailwind CSS + shadcn/ui theming system with light/dark mode support
- **Features**: CSS custom properties, responsive design, accessibility-first components

### 3. Development Environment
- **Files**: `.cursorrules`, `components.json`, path aliases in configs
- **Description**: Configured development environment with proper TypeScript path mapping (@/* aliases)
- **Tools**: ESLint, shadcn/ui CLI integration

### 4. Firebase Integration & Authentication
- **Files**: `src/lib/firebase.ts`, `src/stores/authStore.ts`
- **Description**: Complete Firebase setup with Google OAuth authentication
- **Features**: User authentication, Firestore integration, real-time user data sync
- **Dependencies**: Firebase SDK v10, Google Auth Provider

### 5. Dynamic Profile System
- **Files**: `src/stores/profileConfigStore.ts`, `src/types/profile.ts`
- **Description**: Dynamic profile configuration system using Firebase Remote Config
- **Features**: Fetches config from Firebase Remote Config (`profile_config` parameter), type-safe profile fields, validation system
- **Components**: Support for text, number, single/multiple choice, stepper (slider) fields
- **Note**: `src/profile-config.json` is only an example - actual config comes from Firebase Remote Config

### 6. Onboarding Flow
- **Files**: `src/components/onboarding/OnboardingFlow.tsx`, `src/components/forms/FormField.tsx`
- **Description**: Step-by-step onboarding with one question per screen
- **Features**: Progress tracking, field validation, navigation (back/forward), dynamic form rendering
- **Integration**: Saves to user profile in Firestore, redirects to main app on completion

### 7. Profile Management
- **Files**: `src/pages/ProfilePage.tsx`
- **Description**: Complete profile editing interface showing all fields on one screen
- **Features**: Real-time editing, validation, custom options for choice fields, responsive design
- **Integration**: Syncs with Firestore, supports all field types from configuration

### 8. Application Layout & Navigation
- **Files**: `src/components/layout/AppLayout.tsx`, `src/App.tsx`
- **Description**: Complete app structure with routing and navigation
- **Features**: Responsive header/nav, user menu, theme switcher, protected routes
- **Pages**: Fitness Plan, Progress, Profile, Testing utilities
- **Dependencies**: React Router v6

### 9. Theme System
- **Files**: `src/stores/themeStore.ts`, updated `src/index.css`
- **Description**: Complete light/dark/system theme switching with persistence
- **Features**: System theme detection, user preference storage in profile, seamless switching
- **Integration**: Syncs theme preference to user profile in Firestore

### 10. State Management
- **Files**: `src/stores/` directory (authStore, themeStore, profileConfigStore)
- **Description**: Reactive state management with Zustand
- **Features**: Real-time Firestore synchronization, automatic cleanup, type-safe stores
- **Dependencies**: Zustand with subscribeWithSelector middleware

### 11. Testing Utilities
- **Files**: `src/pages/TestingPage.tsx`
- **Description**: Development utilities for testing and debugging
- **Features**: Reset onboarding, clear profile data, user state inspection
- **Purpose**: Development and QA testing support

---

## üîÑ In Progress Features
*None currently*

---

## üìù Planned Features
- **Fitness Plan Generation**: AI-powered workout plan creation based on user profile
- **Progress Tracking**: Workout logging, progress photos, measurements, analytics
- **Exercise Database**: Comprehensive exercise library with instructions and videos
- **Social Features**: Community challenges, workout sharing, progress comparison

---

## üêõ Known Issues
*None currently*

---

## üìö Additional Notes
- The project uses absolute imports with `@/` prefix for src directory
- All shadcn/ui components are installed in `src/components/ui/`
- The project is configured for both light and dark themes
- Git repository is connected to: git@github.com:vapapaiva/web-tailored-fitness.git

## üî• Firebase Dependencies
**CRITICAL**: The app relies entirely on Firebase Remote Config for configuration:
- **Profile Configuration**: `profile_config` parameter in Firebase Remote Config
- **OpenAI API Key**: `openai_api_key` parameter in Firebase Remote Config  
- **Fitness Plan Prompts**: `prompts_fitness_plan_generation` parameter in Firebase Remote Config
- **Local JSON files**: Are examples only - actual config comes from Firebase

## üîÑ Last Updated
Complete authentication and profile system implemented on 2025-09-17

---

**Remember**: Every time you implement a feature, update this file with the details!
